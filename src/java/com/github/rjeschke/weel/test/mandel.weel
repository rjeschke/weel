// Width in pixels
private width = 800;
// height in pixels
private height = 600;
// Maximum iteration depth
private imax = 1000;
// fparams number
private number = 20;
// Number of threads
private numthreads = 2;

fparams     = {};
fparams[ 0] = {-2.5, 1.5, -1.5, 1.5};
fparams[ 1] = {-0.67, -0.47, 0.56, 0.71};
fparams[ 2] = {-0.748, -0.741, 0.132, 0.137};
fparams[ 3] = {-1.860573964886, -1.860573955145, -0.000000937963, -0.000000930786};
fparams[ 4] = {-0.144886188, -0.142549766, 0.887085252, 0.888842007};
fparams[ 5] = {-1.63742981, -1.61804453, -0.00661551021, 0.00794620067};
fparams[ 6] = {-0.274188704403, -0.274188253684, 0.841196557584, 0.841196897085};
fparams[ 7] = {-0.756142580573, -0.755810462997, 0.063936666834, 0.064188893918};
fparams[ 8] = {0.25545802, 0.255471414, 0.000646917149, 0.000656958669};
fparams[ 9] = {0.0142306089, 0.0910453238, 0.620278612, 0.67793702};
fparams[10] = {0.053016752, 0.0621620696, 0.65284525, 0.659712534};
fparams[11] = {0.0533606429, 0.0538874846, 0.657753872, 0.658148838};
fparams[12] = {-1.86561969, -1.8570414, -0.00343991257, 0.00300228037};
fparams[13] = {-1.98554866, -1.98535072, -0.000073082745, 0.000075308606};
fparams[14] = {-1.40796558, -1.4078986, 0.136930868, 0.136982191};
fparams[15] = {-0.189516153, -0.185453221, 0.649839532, 0.652892154};
fparams[16] = {-1.1414851, -1.14145892, 0.210522372, 0.210542001};
fparams[17] = {0.413359627551, 0.413361299095, 0.349679018431, 0.349680281948};
fparams[18] = {-1.629272209987, -1.629272209811, 0.020688346119, 0.020688346252};
fparams[19] = {0.315711855808, 0.315712001396, 0.029772060555, 0.029772170317};
fparams[20] = {0.3157113057952, 0.3157125563438, 0.029771625714741, 0.029772567058};
fparams[21] = {-0.637915280085, -0.637914271429, 0.388118260435, 0.388119017273};
fparams[22] = {-1.861408968987, -1.861408961972, 0.008042630316, 0.008042635619};
fparams[23] = {-1.861408966082, -1.861408964884, 0.008042632526, 0.008042633433};

private params = number >= 0 && number < size(fparams) ? fparams[number] : fparams[0];
private image = new(java.Image, width, height);

private x_min   = params[0];
private x_max   = params[1];
private y_min   = params[2];
private y_max   = params[3];
private x_step  = (x_max - x_min) / width;
private y_step  = (y_min - y_max) / height;

private colors = {};

do
    local n = imax, p = n / 3;
    for i = 0, imax - 1 do
        local s = floor(i / p);
        local c = pow((i / p) % 1, 0.9) * 255;
        switch s do
            case 0:
                colors[i] = {c, 0, 0};
                break;
            case 1:
                colors[i] = {255, c, 0};
                break;
            case 2:
                colors[i] = {255, 255, c};
                break;
        end
    end
end

private lock = new(java.Lock);
private sema = new(java.Semaphore, numthreads);
private current = 0;

func getLine()

    lock->lock();
        local ret = current;
        current += 1;
    lock->unlock();
    
    return ret >= height ? -1 : ret;
end

sub iterat(y)
    local x, vx, vy, i, zx, zy, tx, ty, tx1, ty1, col, cnum;

    vy = y_max + y * y_step;
    for x = 0, width - 1 do
        vx = x_min + x * x_step;
        zx = zy = 0;

        for i = 0, imax - 2 do
            tx = zx + vx;
            ty = zy + vy;
            tx1 = tx * tx;
            ty1 = ty * ty;
            zx = tx1 - ty1;
            zy = tx * ty * 2;
            if (tx1 + ty1) > 4 then
                break;
            end
        end

        local c = colors[i];
        image->setPixel(x, y, c[0], c[1], c[2]);
    end
end


t = clock();

for i = 1, numthreads do
    new(java.Thread, 
        @{
            local y = getLine();
            while y >= 0 do
                iterat(y);
                y = getLine();
            end
         }, 
        @{
            sema->acquire();
         }
       )->start(); 
end

while sema->available() do
    sleep(100);
end

t = clock() - t;

println(t.." seconds.");

image->toPng("/home/rjeschke/mandel.png");

